diff --git a/node_modules/release/bin/release.js b/node_modules/release/bin/release.js
index b005c99..7f7ee38 100755
--- a/node_modules/release/bin/release.js
+++ b/node_modules/release/bin/release.js
@@ -56,21 +56,27 @@ const changeTypes = [
 	{
 		handle: 'major',
 		name: 'Major Change',
-		pluralName: 'Major Changes',
-		description: 'incompatible API change'
+		pluralName: '🔥 Major Changes',
+		description: 'incompatible API change',
 	},
 	{
 		handle: 'minor',
 		name: 'Minor Change',
-		pluralName: 'Minor Changes',
-		description: 'backwards-compatible functionality'
+		pluralName: '🚀 Minor Changes',
+		description: 'backwards-compatible functionality',
 	},
 	{
 		handle: 'patch',
 		name: 'Patch',
-		pluralName: 'Patches',
-		description: 'backwards-compatible bug fix'
-	}
+		pluralName: '🐞 Patches',
+		description: 'backwards-compatible bug fix',
+	},
+	{
+		handle: 'meta',
+		name: 'Meta',
+		pluralName: 'Internal Meta Changes',
+		description: 'internal meta change',
+	},
 ];
 
 const getReleaseURL = (release, edit = false) => {
diff --git a/node_modules/release/lib/choices.js b/node_modules/release/lib/choices.js
index 6d08754..379d5b7 100644
--- a/node_modules/release/lib/choices.js
+++ b/node_modules/release/lib/choices.js
@@ -1,49 +1,49 @@
 // Packages
-const inquirer = require('inquirer');
-const semVer = require('semver');
+const inquirer = require("inquirer")
+const semVer = require("semver")
 
 module.exports = (changeTypes, tags) => {
-	const list = [];
-	let notNeeded;
-
-	// We just detected the first release
-	if (tags.length < 2) {
-		return null;
-	}
-
-	const releaseType = semVer.diff(tags[1].version, tags[0].version);
-
-	switch (releaseType) {
-	case 'minor':
-		notNeeded = 1;
-		break;
-	case 'patch':
-		notNeeded = 2;
-		break;
-	default:
-		notNeeded = 0;
-	}
-
-	if (notNeeded) {
-		changeTypes.splice(0, notNeeded);
-	}
-
-	for (const type of changeTypes) {
-		const short = type.handle;
-
-		list.push({
-			'name': `${type.name} (${type.description})`,
-			'value': short,
-			'short': `(${short})`
-		});
-	}
-
-	return list.concat([
-		new inquirer.Separator(),
-		{
-			'name': 'Ignore',
-			'short': '(ignored)',
-			'value': 'ignore'
-		}
-	]);
-};
+  const list = []
+  let notNeeded
+
+  // We just detected the first release
+  if (tags.length < 2) {
+    return null
+  }
+
+  const releaseType = semVer.diff(tags[1].version, tags[0].version)
+
+  // switch (releaseType) {
+  // case 'minor':
+  // 	notNeeded = 1;
+  // 	break;
+  // case 'patch':
+  // 	notNeeded = 2;
+  // 	break;
+  // default:
+  // 	notNeeded = 0;
+  // }
+
+  // if (notNeeded) {
+  // 	changeTypes.splice(0, notNeeded);
+  // }
+
+  for (const type of changeTypes) {
+    const short = type.handle
+
+    list.push({
+      name: `${type.name} (${type.description})`,
+      value: short,
+      short: `(${short})`,
+    })
+  }
+
+  return list.concat([
+    new inquirer.Separator(),
+    {
+      name: "Ignore",
+      short: "(ignored)",
+      value: "ignore",
+    },
+  ])
+}
